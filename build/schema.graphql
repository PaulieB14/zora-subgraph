# Zora Social Network Subgraph Schema
# Comprehensive tracking of all Zora social interactions and engagement
# Following all 6 Graph Best Practices from https://thegraph.com/docs/en/subgraphs/best-practices/pruning/

# Core Social Entities
type Post @entity(immutable: true) {
  id: Bytes! # ContentCoin contract address
  creator: User!
  content: String!
  contentURI: String!
  name: String!
  symbol: String!
  createdAt: BigInt!
  blockNumber: BigInt!
  transactionHash: Bytes!

  # Social engagement metrics
  totalSupply: BigInt!
  totalMints: BigInt! # Total "likes" (minting activity)
  totalTransfers: BigInt! # Total transfers (sharing/engagement)
  totalSwaps: BigInt! # Trading activity
  totalHolders: BigInt! # Unique holders (unique "likers")

  # Relationships - Best Practice 2: @derivedFrom
  mints: [Mint!]! @derivedFrom(field: "post")
  transfers: [Transfer!]! @derivedFrom(field: "post")
  swaps: [Swap!]! @derivedFrom(field: "post")
  rewards: [Reward!]! @derivedFrom(field: "post")
  contentCoin: ContentCoin @derivedFrom(field: "post")
}

type User @entity(immutable: false) {
  id: Bytes! # User address
  totalPosts: BigInt!
  totalMints: BigInt! # Total "likes" given
  totalTransfers: BigInt! # Total transfers made
  totalSwaps: BigInt! # Total trading activity
  totalRewards: BigInt! # Total rewards earned

  # Best Practice 2: Use @derivedFrom for relationships
  posts: [Post!]! @derivedFrom(field: "creator")
  mints: [Mint!]! @derivedFrom(field: "minter")
  transfers: [Transfer!]! @derivedFrom(field: "from")
  swaps: [Swap!]! @derivedFrom(field: "user")
  rewards: [Reward!]! @derivedFrom(field: "recipient")
  creatorCoin: CreatorCoin @derivedFrom(field: "creator")
}

type CreatorCoin @entity(immutable: false) {
  id: Bytes! # Creator address
  creator: User!
  name: String!
  symbol: String!
  totalSupply: BigInt!
  totalHolders: BigInt!

  # Trading activity
  swaps: [Swap!]! @derivedFrom(field: "creatorCoin")
  rewards: [Reward!]! @derivedFrom(field: "creatorCoin")
}

type ContentCoin @entity(immutable: false) {
  id: Bytes! # ContentCoin contract address
  post: Post!
  creator: User!
  name: String!
  symbol: String!
  totalSupply: BigInt!
  totalMints: BigInt!
  totalTransfers: BigInt!
  createdAt: BigInt!

  # Relationships
  mints: [Mint!]! @derivedFrom(field: "contentCoin")
  transfers: [Transfer!]! @derivedFrom(field: "contentCoin")
}

# Social Engagement Events - Best Practice 3: Immutable entities with Bytes IDs
type Mint @entity(immutable: true) {
  id: Bytes! # transaction hash + log index
  post: Post!
  contentCoin: ContentCoin!
  minter: User!
  amount: BigInt!
  timestamp: BigInt!
  blockNumber: BigInt!
  transactionHash: Bytes!
}

type Transfer @entity(immutable: true) {
  id: Bytes! # transaction hash + log index
  post: Post!
  contentCoin: ContentCoin
  from: User!
  to: User!
  amount: BigInt!
  timestamp: BigInt!
  blockNumber: BigInt!
  transactionHash: Bytes!
}

type Swap @entity(immutable: true) {
  id: Bytes! # transaction hash + log index
  post: Post!
  creatorCoin: CreatorCoin!
  user: User!
  amountIn: BigInt!
  amountOut: BigInt!
  timestamp: BigInt!
  blockNumber: BigInt!
  transactionHash: Bytes!
}

type Reward @entity(immutable: true) {
  id: Bytes! # transaction hash + log index
  post: Post!
  creatorCoin: CreatorCoin!
  recipient: User!
  amount: BigInt!
  rewardType: String! # "creator", "platform", "referral", "protocol"
  timestamp: BigInt!
  blockNumber: BigInt!
  transactionHash: Bytes!
}

