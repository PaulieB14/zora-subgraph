{"version":3,"sources":["../../src/index.ts","../../src/types.ts","../../src/env.ts","../../src/version.ts","../../src/client.ts"],"sourcesContent":["export * from \"./types\";\nexport * from \"./client\";\n","// To parse this data:\n//\n//   import { Convert, NetworksRegistryInner } from \"./file\";\n//\n//   const networksRegistryInner = Convert.toNetworksRegistryInner(json);\n//\n// These functions will throw an error if the JSON doesn't\n// match the expected interface, even if the JSON is valid.\n\nexport interface NetworksRegistryInner {\n    /**\n     * Reference to this schema file\n     */\n    $schema:     string;\n    description: string;\n    /**\n     * List of networks\n     */\n    networks: Network[];\n    title:    string;\n    /**\n     * Date and time of the last update\n     */\n    updatedAt: Date;\n    /**\n     * Version of the registry\n     */\n    version: string;\n}\n\nexport interface Network {\n    /**\n     * [optional] List of possible aliases for the network id, e.g. ethereum, eth, mainnet,\n     * eth-mainnet\n     */\n    aliases?: string[];\n    /**\n     * List of API URLs for the network, i.e. Etherescan-like API to get ABI. Use\n     * {CUSTOM_API_KEY} as a placeholder for a private API key\n     */\n    apiUrls?: APIURL[];\n    /**\n     * CAIP-2 Chain ID, e.g. eip155:1, bip122:000000000019d6689c085ae165831e93\n     */\n    caip2Id: string;\n    /**\n     * URL to the chain documentation\n     */\n    docsUrl?: string;\n    /**\n     * URLs for the block explorers\n     */\n    explorerUrls?: string[];\n    /**\n     * Firehose block information\n     */\n    firehose?: Firehose;\n    /**\n     * Display name of the network, e.g. Ethereum Mainnet, Bitcoin Testnet\n     */\n    fullName: string;\n    /**\n     * Graph Node specific configuration information\n     */\n    graphNode?: GraphNode;\n    /**\n     * Icons for the network\n     */\n    icon?: Icon;\n    /**\n     * Established name of the network in The Graph ecosystem, e.g. mainnet, btc,\n     * arweave-mainnet, near-testnet\n     */\n    id: string;\n    /**\n     * Documentation to run indexer components for this network\n     */\n    indexerDocsUrls?: IndexerDocsURL[];\n    /**\n     * Issuance rewards on the Graph Network for this chain\n     */\n    issuanceRewards: boolean;\n    /**\n     * Symbol of the native token\n     */\n    nativeToken?: string;\n    /**\n     * Whether the network is a mainnet/testnet/devnet\n     */\n    networkType: NetworkType;\n    /**\n     * Relations to other networks in the registry\n     */\n    relations?: Relation[];\n    /**\n     * List of RPC URLs for the chain. Use {CUSTOM_API_KEY} as a placeholder for a private API\n     * key\n     */\n    rpcUrls?: string[];\n    /**\n     * Second display name of the network, e.g. Sepolia, Nova\n     */\n    secondName?: string;\n    /**\n     * Services available for the network in the ecosystem\n     */\n    services: Services;\n    /**\n     * Short display name of the network, e.g. Ethereum, BNB\n     */\n    shortName: string;\n    /**\n     * Token API specific configuration information\n     */\n    tokenApi?: TokenAPI;\n}\n\nexport interface APIURL {\n    /**\n     * Kind of API\n     */\n    kind: APIURLKind;\n    url:  string;\n}\n\n/**\n * Kind of API\n */\nexport enum APIURLKind {\n    Blockscout = \"blockscout\",\n    Etherscan = \"etherscan\",\n    Ethplorer = \"ethplorer\",\n    Other = \"other\",\n    Subscan = \"subscan\",\n}\n\n/**\n * Firehose block information\n */\nexport interface Firehose {\n    /**\n     * Block features supported by the network\n     */\n    blockFeatures?: string[];\n    /**\n     * Block type, e.g. sf.ethereum.type.v2.Block\n     */\n    blockType: string;\n    /**\n     * Protobuf definitions on buf.build, e.g. https://buf.build/streamingfast/firehose-ethereum\n     */\n    bufUrl: string;\n    /**\n     * Bytes encoding, e.g. hex, 0xhex, base58\n     */\n    bytesEncoding: BytesEncoding;\n    /**\n     * [optional] Timestamp when the network was deprecated in Firehose software\n     */\n    deprecatedAt?: Date;\n    /**\n     * [optional] Whether there is support for extended EVM block model\n     */\n    evmExtendedModel?: boolean;\n    /**\n     * First available block information\n     */\n    firstStreamableBlock?: FirstStreamableBlock;\n}\n\n/**\n * Bytes encoding, e.g. hex, 0xhex, base58\n */\nexport enum BytesEncoding {\n    Base58 = \"base58\",\n    Base64 = \"base64\",\n    Hex = \"hex\",\n    Other = \"other\",\n    The0Xhex = \"0xhex\",\n}\n\n/**\n * First available block information\n */\nexport interface FirstStreamableBlock {\n    /**\n     * Block height of the first streamable block. Can be different from genesis\n     */\n    height: number;\n    /**\n     * Id of the first streamable block either in 0x-prefixed hex or base58\n     */\n    id: string;\n}\n\n/**\n * Graph Node specific configuration information\n */\nexport interface GraphNode {\n    /**\n     * [optional] Timestamp when the network was deprecated in Graph Node software\n     */\n    deprecatedAt?: Date;\n    /**\n     * [optional] Protocol name in graph-node, e.g. ethereum, near, arweave\n     */\n    protocol?: Protocol;\n}\n\n/**\n * [optional] Protocol name in graph-node, e.g. ethereum, near, arweave\n */\nexport enum Protocol {\n    Arweave = \"arweave\",\n    Cosmos = \"cosmos\",\n    Ethereum = \"ethereum\",\n    Near = \"near\",\n    Other = \"other\",\n    Starknet = \"starknet\",\n}\n\n/**\n * Icons for the network\n */\nexport interface Icon {\n    /**\n     * Web3Icons icon - see https://github.com/0xa3k5/web3icons\n     */\n    web3Icons?: Web3Icons;\n}\n\n/**\n * Web3Icons icon - see https://github.com/0xa3k5/web3icons\n */\nexport interface Web3Icons {\n    /**\n     * Web3Icons icon ID\n     */\n    name: string;\n    /**\n     * Variants of the icon, if none specified - all are available\n     */\n    variants?: string[];\n}\n\nexport interface IndexerDocsURL {\n    /**\n     * Docs description, e.g. Arbitrum 101\n     */\n    description?: string;\n    /**\n     * URL to the documentation, e.g. https://docs.infradao.com/archive-nodes-101/arbitrum\n     */\n    url: string;\n}\n\n/**\n * Whether the network is a mainnet/testnet/devnet\n */\nexport enum NetworkType {\n    Beacon = \"beacon\",\n    Devnet = \"devnet\",\n    Mainnet = \"mainnet\",\n    Testnet = \"testnet\",\n}\n\nexport interface Relation {\n    /**\n     * Kind of relation\n     */\n    kind: RelationKind;\n    /**\n     * ID of the related network, e.g. mainnet, near-mainnet\n     */\n    network: string;\n}\n\n/**\n * Kind of relation\n */\nexport enum RelationKind {\n    BeaconOf = \"beaconOf\",\n    EvmOf = \"evmOf\",\n    ForkedFrom = \"forkedFrom\",\n    L2Of = \"l2Of\",\n    Other = \"other\",\n    ShardOf = \"shardOf\",\n    SvmOf = \"svmOf\",\n    TestnetOf = \"testnetOf\",\n}\n\n/**\n * Services available for the network in the ecosystem\n */\nexport interface Services {\n    /**\n     * Firehose gRPC URLs, e.g. eth.firehose.pinax.network:443\n     */\n    firehose?: string[];\n    /**\n     * Substreams-based subgraphs studio deployment URLs, e.g. https://api.thegraph.com/deploy\n     */\n    sps?: string[];\n    /**\n     * Subgraph studio deployment URLs, e.g. https://api.thegraph.com/deploy\n     */\n    subgraphs?: string[];\n    /**\n     * Substreams gRPC URLs, e.g. eth.substreams.pinax.network:443\n     */\n    substreams?: string[];\n    /**\n     * Token API URLs, e.g. https://token-api.thegraph.com\n     */\n    tokenApi?: string[];\n}\n\n/**\n * Token API specific configuration information\n */\nexport interface TokenAPI {\n    /**\n     * [optional] Timestamp when the network was deprecated in Token API software\n     */\n    deprecatedAt?: Date;\n    features?:     Feature[];\n    /**\n     * Network ID in Token API, has to be an ID or alias of an existing network\n     */\n    networkId?: string;\n}\n\n/**\n * List of Token API features supported\n */\nexport enum Feature {\n    Dexes = \"dexes\",\n    Nfts = \"nfts\",\n    Other = \"other\",\n    Tokens = \"tokens\",\n}\n\n// Converts JSON strings to/from your types\n// and asserts the results of JSON.parse at runtime\nexport class Convert {\n    public static toNetworksRegistryInner(json: string): NetworksRegistryInner {\n        return cast(JSON.parse(json), r(\"NetworksRegistryInner\"));\n    }\n\n    public static networksRegistryInnerToJson(value: NetworksRegistryInner): string {\n        return JSON.stringify(uncast(value, r(\"NetworksRegistryInner\")), null, 2);\n    }\n}\n\nfunction invalidValue(typ: any, val: any, key: any, parent: any = ''): never {\n    const prettyTyp = prettyTypeName(typ);\n    const parentText = parent ? ` on ${parent}` : '';\n    const keyText = key ? ` for key \"${key}\"` : '';\n    throw Error(`Invalid value${keyText}${parentText}. Expected ${prettyTyp} but got ${JSON.stringify(val)}`);\n}\n\nfunction prettyTypeName(typ: any): string {\n    if (Array.isArray(typ)) {\n        if (typ.length === 2 && typ[0] === undefined) {\n            return `an optional ${prettyTypeName(typ[1])}`;\n        } else {\n            return `one of [${typ.map(a => { return prettyTypeName(a); }).join(\", \")}]`;\n        }\n    } else if (typeof typ === \"object\" && typ.literal !== undefined) {\n        return typ.literal;\n    } else {\n        return typeof typ;\n    }\n}\n\nfunction jsonToJSProps(typ: any): any {\n    if (typ.jsonToJS === undefined) {\n        const map: any = {};\n        typ.props.forEach((p: any) => map[p.json] = { key: p.js, typ: p.typ });\n        typ.jsonToJS = map;\n    }\n    return typ.jsonToJS;\n}\n\nfunction jsToJSONProps(typ: any): any {\n    if (typ.jsToJSON === undefined) {\n        const map: any = {};\n        typ.props.forEach((p: any) => map[p.js] = { key: p.json, typ: p.typ });\n        typ.jsToJSON = map;\n    }\n    return typ.jsToJSON;\n}\n\nfunction transform(val: any, typ: any, getProps: any, key: any = '', parent: any = ''): any {\n    function transformPrimitive(typ: string, val: any): any {\n        if (typeof typ === typeof val) return val;\n        return invalidValue(typ, val, key, parent);\n    }\n\n    function transformUnion(typs: any[], val: any): any {\n        // val must validate against one typ in typs\n        const l = typs.length;\n        for (let i = 0; i < l; i++) {\n            const typ = typs[i];\n            try {\n                return transform(val, typ, getProps);\n            } catch (_) {}\n        }\n        return invalidValue(typs, val, key, parent);\n    }\n\n    function transformEnum(cases: string[], val: any): any {\n        if (cases.indexOf(val) !== -1) return val;\n        return invalidValue(cases.map(a => { return l(a); }), val, key, parent);\n    }\n\n    function transformArray(typ: any, val: any): any {\n        // val must be an array with no invalid elements\n        if (!Array.isArray(val)) return invalidValue(l(\"array\"), val, key, parent);\n        return val.map(el => transform(el, typ, getProps));\n    }\n\n    function transformDate(val: any): any {\n        if (val === null) {\n            return null;\n        }\n        const d = new Date(val);\n        if (isNaN(d.valueOf())) {\n            return invalidValue(l(\"Date\"), val, key, parent);\n        }\n        return d;\n    }\n\n    function transformObject(props: { [k: string]: any }, additional: any, val: any): any {\n        if (val === null || typeof val !== \"object\" || Array.isArray(val)) {\n            return invalidValue(l(ref || \"object\"), val, key, parent);\n        }\n        const result: any = {};\n        Object.getOwnPropertyNames(props).forEach(key => {\n            const prop = props[key];\n            const v = Object.prototype.hasOwnProperty.call(val, key) ? val[key] : undefined;\n            result[prop.key] = transform(v, prop.typ, getProps, key, ref);\n        });\n        Object.getOwnPropertyNames(val).forEach(key => {\n            if (!Object.prototype.hasOwnProperty.call(props, key)) {\n                result[key] = transform(val[key], additional, getProps, key, ref);\n            }\n        });\n        return result;\n    }\n\n    if (typ === \"any\") return val;\n    if (typ === null) {\n        if (val === null) return val;\n        return invalidValue(typ, val, key, parent);\n    }\n    if (typ === false) return invalidValue(typ, val, key, parent);\n    let ref: any = undefined;\n    while (typeof typ === \"object\" && typ.ref !== undefined) {\n        ref = typ.ref;\n        typ = typeMap[typ.ref];\n    }\n    if (Array.isArray(typ)) return transformEnum(typ, val);\n    if (typeof typ === \"object\") {\n        return typ.hasOwnProperty(\"unionMembers\") ? transformUnion(typ.unionMembers, val)\n            : typ.hasOwnProperty(\"arrayItems\")    ? transformArray(typ.arrayItems, val)\n            : typ.hasOwnProperty(\"props\")         ? transformObject(getProps(typ), typ.additional, val)\n            : invalidValue(typ, val, key, parent);\n    }\n    // Numbers can be parsed by Date but shouldn't be.\n    if (typ === Date && typeof val !== \"number\") return transformDate(val);\n    return transformPrimitive(typ, val);\n}\n\nfunction cast<T>(val: any, typ: any): T {\n    return transform(val, typ, jsonToJSProps);\n}\n\nfunction uncast<T>(val: T, typ: any): any {\n    return transform(val, typ, jsToJSONProps);\n}\n\nfunction l(typ: any) {\n    return { literal: typ };\n}\n\nfunction a(typ: any) {\n    return { arrayItems: typ };\n}\n\nfunction u(...typs: any[]) {\n    return { unionMembers: typs };\n}\n\nfunction o(props: any[], additional: any) {\n    return { props, additional };\n}\n\nfunction m(additional: any) {\n    return { props: [], additional };\n}\n\nfunction r(name: string) {\n    return { ref: name };\n}\n\nconst typeMap: any = {\n    \"NetworksRegistryInner\": o([\n        { json: \"$schema\", js: \"$schema\", typ: \"\" },\n        { json: \"description\", js: \"description\", typ: \"\" },\n        { json: \"networks\", js: \"networks\", typ: a(r(\"Network\")) },\n        { json: \"title\", js: \"title\", typ: \"\" },\n        { json: \"updatedAt\", js: \"updatedAt\", typ: Date },\n        { json: \"version\", js: \"version\", typ: \"\" },\n    ], false),\n    \"Network\": o([\n        { json: \"aliases\", js: \"aliases\", typ: u(undefined, a(\"\")) },\n        { json: \"apiUrls\", js: \"apiUrls\", typ: u(undefined, a(r(\"APIURL\"))) },\n        { json: \"caip2Id\", js: \"caip2Id\", typ: \"\" },\n        { json: \"docsUrl\", js: \"docsUrl\", typ: u(undefined, \"\") },\n        { json: \"explorerUrls\", js: \"explorerUrls\", typ: u(undefined, a(\"\")) },\n        { json: \"firehose\", js: \"firehose\", typ: u(undefined, r(\"Firehose\")) },\n        { json: \"fullName\", js: \"fullName\", typ: \"\" },\n        { json: \"graphNode\", js: \"graphNode\", typ: u(undefined, r(\"GraphNode\")) },\n        { json: \"icon\", js: \"icon\", typ: u(undefined, r(\"Icon\")) },\n        { json: \"id\", js: \"id\", typ: \"\" },\n        { json: \"indexerDocsUrls\", js: \"indexerDocsUrls\", typ: u(undefined, a(r(\"IndexerDocsURL\"))) },\n        { json: \"issuanceRewards\", js: \"issuanceRewards\", typ: true },\n        { json: \"nativeToken\", js: \"nativeToken\", typ: u(undefined, \"\") },\n        { json: \"networkType\", js: \"networkType\", typ: r(\"NetworkType\") },\n        { json: \"relations\", js: \"relations\", typ: u(undefined, a(r(\"Relation\"))) },\n        { json: \"rpcUrls\", js: \"rpcUrls\", typ: u(undefined, a(\"\")) },\n        { json: \"secondName\", js: \"secondName\", typ: u(undefined, \"\") },\n        { json: \"services\", js: \"services\", typ: r(\"Services\") },\n        { json: \"shortName\", js: \"shortName\", typ: \"\" },\n        { json: \"tokenApi\", js: \"tokenApi\", typ: u(undefined, r(\"TokenAPI\")) },\n    ], false),\n    \"APIURL\": o([\n        { json: \"kind\", js: \"kind\", typ: r(\"APIURLKind\") },\n        { json: \"url\", js: \"url\", typ: \"\" },\n    ], false),\n    \"Firehose\": o([\n        { json: \"blockFeatures\", js: \"blockFeatures\", typ: u(undefined, a(\"\")) },\n        { json: \"blockType\", js: \"blockType\", typ: \"\" },\n        { json: \"bufUrl\", js: \"bufUrl\", typ: \"\" },\n        { json: \"bytesEncoding\", js: \"bytesEncoding\", typ: r(\"BytesEncoding\") },\n        { json: \"deprecatedAt\", js: \"deprecatedAt\", typ: u(undefined, Date) },\n        { json: \"evmExtendedModel\", js: \"evmExtendedModel\", typ: u(undefined, true) },\n        { json: \"firstStreamableBlock\", js: \"firstStreamableBlock\", typ: u(undefined, r(\"FirstStreamableBlock\")) },\n    ], false),\n    \"FirstStreamableBlock\": o([\n        { json: \"height\", js: \"height\", typ: 0 },\n        { json: \"id\", js: \"id\", typ: \"\" },\n    ], false),\n    \"GraphNode\": o([\n        { json: \"deprecatedAt\", js: \"deprecatedAt\", typ: u(undefined, Date) },\n        { json: \"protocol\", js: \"protocol\", typ: u(undefined, r(\"Protocol\")) },\n    ], false),\n    \"Icon\": o([\n        { json: \"web3Icons\", js: \"web3Icons\", typ: u(undefined, r(\"Web3Icons\")) },\n    ], false),\n    \"Web3Icons\": o([\n        { json: \"name\", js: \"name\", typ: \"\" },\n        { json: \"variants\", js: \"variants\", typ: u(undefined, a(\"\")) },\n    ], false),\n    \"IndexerDocsURL\": o([\n        { json: \"description\", js: \"description\", typ: u(undefined, \"\") },\n        { json: \"url\", js: \"url\", typ: \"\" },\n    ], false),\n    \"Relation\": o([\n        { json: \"kind\", js: \"kind\", typ: r(\"RelationKind\") },\n        { json: \"network\", js: \"network\", typ: \"\" },\n    ], false),\n    \"Services\": o([\n        { json: \"firehose\", js: \"firehose\", typ: u(undefined, a(\"\")) },\n        { json: \"sps\", js: \"sps\", typ: u(undefined, a(\"\")) },\n        { json: \"subgraphs\", js: \"subgraphs\", typ: u(undefined, a(\"\")) },\n        { json: \"substreams\", js: \"substreams\", typ: u(undefined, a(\"\")) },\n        { json: \"tokenApi\", js: \"tokenApi\", typ: u(undefined, a(\"\")) },\n    ], false),\n    \"TokenAPI\": o([\n        { json: \"deprecatedAt\", js: \"deprecatedAt\", typ: u(undefined, Date) },\n        { json: \"features\", js: \"features\", typ: u(undefined, a(r(\"Feature\"))) },\n        { json: \"networkId\", js: \"networkId\", typ: u(undefined, \"\") },\n    ], false),\n    \"APIURLKind\": [\n        \"blockscout\",\n        \"etherscan\",\n        \"ethplorer\",\n        \"other\",\n        \"subscan\",\n    ],\n    \"BytesEncoding\": [\n        \"base58\",\n        \"base64\",\n        \"hex\",\n        \"other\",\n        \"0xhex\",\n    ],\n    \"Protocol\": [\n        \"arweave\",\n        \"cosmos\",\n        \"ethereum\",\n        \"near\",\n        \"other\",\n        \"starknet\",\n    ],\n    \"NetworkType\": [\n        \"beacon\",\n        \"devnet\",\n        \"mainnet\",\n        \"testnet\",\n    ],\n    \"RelationKind\": [\n        \"beaconOf\",\n        \"evmOf\",\n        \"forkedFrom\",\n        \"l2Of\",\n        \"other\",\n        \"shardOf\",\n        \"svmOf\",\n        \"testnetOf\",\n    ],\n    \"Feature\": [\n        \"dexes\",\n        \"nfts\",\n        \"other\",\n        \"tokens\",\n    ],\n};\n","/**\n * Applies environment variables to a URL string.\n * If environment variables are not available, returns an empty string.\n *\n * @param url - URL string that may contain environment variable placeholders\n * @returns URL with environment variables applied, or empty string if variables are missing\n * @example\n * ```typescript\n * // With ETHERSCAN_API_KEY=abc123\n * applyEnvVars(\"https://api.etherscan.io/api?apikey={ETHERSCAN_API_KEY}\")\n * // Returns: \"https://api.etherscan.io/api?apikey=abc123\"\n *\n * // Without required env var\n * applyEnvVars(\"https://api.etherscan.io/api?apikey={MISSING_KEY}\")\n * // Returns: \"\"\n *\n * // No env vars needed\n * applyEnvVars(\"https://api.etherscan.io/api\")\n * // Returns: \"https://api.etherscan.io/api\"\n * ```\n */\nexport function applyEnvVars(url: string): string {\n  const envVars = url.match(/\\{([^}]+)\\}/g);\n  if (!envVars) return url;\n  for (const envVar of envVars) {\n    const value = process?.env?.[envVar.slice(1, -1)];\n    if (!value) {\n      return \"\";\n    }\n    url = url.replace(envVar, value);\n  }\n  return url;\n}\n","export const schemaVersion = \"0.7\";\n","import { type NetworksRegistryInner, type Network, type APIURLKind } from \"./types.js\";\nimport { applyEnvVars } from \"./env.js\";\nimport { schemaVersion } from \"./version.js\";\n\nconst REGISTRY_BASE_URL = \"https://networks-registry.thegraph.com\";\nconst FALLBACK_BASE_URL = \"https://raw.githubusercontent.com/graphprotocol/networks-registry/refs/heads/main/public\";\n\nlet readFileSync: ((path: string, encoding: string) => string) | undefined;\ntry {\n  // Only import fs in Node.js environment\n  const fs = require(\"fs\");\n  readFileSync = fs.readFileSync;\n} catch {\n  // Ignore error - fs is not available in browser environments\n}\n\n/**\n * Client for interacting with The Graph Networks Registry.\n * Provides methods to load the registry from json, file or URL.\n */\nexport class NetworksRegistry {\n  /**\n   * Creates a new NetworksRegistry instance.\n   * @param registry - The parsed NetworksRegistry data\n   */\n  constructor(private registry: NetworksRegistryInner) {}\n\n  /**\n   * Gets all networks in the registry.\n   * @returns Array of all network elements\n   */\n  get networks(): Network[] {\n    return this.registry.networks;\n  }\n\n  /**\n   * Gets the version of the loaded registry.\n   * @returns Version string\n   */\n  get version(): string {\n    return this.registry.version;\n  }\n\n  /**\n   * Gets the date of the last update of the registry.\n   * @returns Date object\n   */\n  get updatedAt(): Date {\n    return new Date(this.registry.updatedAt);\n  }\n\n  /**\n   * Attempts to fetch the registry from a given URL, returns null if fetch fails\n   * @internal\n   */\n  private static async tryFetchRegistry(url: string): Promise<NetworksRegistry | null> {\n    try {\n      return await NetworksRegistry.fromUrl(url);\n    } catch {\n      return null;\n    }\n  }\n\n  /**\n   * Fetches and loads the latest version of the networks registry. First tries to fetch from\n   * the primary registry URL at networks-registry.thegraph.com, then falls back to the fallback URL at GitHub\n   * Uses the library version to determine the latest compatible registry URL.\n   * Library version 0.5.x will use the latest registry version 0.5.y even if 0.6.z is available\n   *\n   * @returns Promise that resolves to a new NetworksRegistry instance\n   * @throws Error if the registry fetch fails\n   *\n   * @example\n   * ```typescript\n   * const registry = await NetworksRegistry.fromLatestVersion();\n   * ```\n   */\n  static async fromLatestVersion(): Promise<NetworksRegistry> {\n    const primaryUrl = NetworksRegistry.getLatestVersionUrl();\n    const primaryRegistry = await NetworksRegistry.tryFetchRegistry(primaryUrl);\n    if (primaryRegistry) return primaryRegistry;\n\n    const fallbackUrl = NetworksRegistry.getLatestVersionFallbackUrl();\n    const fallbackRegistry = await NetworksRegistry.tryFetchRegistry(fallbackUrl);\n    if (fallbackRegistry) return fallbackRegistry;\n\n    throw new Error(`Failed to fetch registry from ${primaryUrl}`);\n  }\n\n  /**\n   * Fetches and loads a specific version of the networks registry. First tries to fetch from\n   * the primary registry URL at networks-registry.thegraph.com, then falls back to the fallback URL at GitHub\n   *\n   * @param version - The exact version to fetch (e.g. \"0.5.0\")\n   * @returns Promise that resolves to a new NetworksRegistry instance\n   * @throws Error if the registry fetch fails\n   *\n   * @example\n   * ```typescript\n   * const registry = await NetworksRegistry.fromExactVersion(\"0.5.0\");\n   * ```\n   */\n  static async fromExactVersion(version: string): Promise<NetworksRegistry> {\n    const primaryUrl = NetworksRegistry.getExactVersionUrl(version);\n    const primaryRegistry = await NetworksRegistry.tryFetchRegistry(primaryUrl);\n    if (primaryRegistry) return primaryRegistry;\n\n    const fallbackUrl = NetworksRegistry.getExactVersionFallbackUrl(version);\n    const fallbackRegistry = await NetworksRegistry.tryFetchRegistry(fallbackUrl);\n    if (fallbackRegistry) return fallbackRegistry;\n\n    throw new Error(`Failed to fetch registry from ${primaryUrl}`);\n  }\n\n  /**\n   * Loads the networks registry from a URL.\n   *\n   * @param url - The URL to fetch the registry from\n   * @returns Promise that resolves to a new NetworksRegistry instance\n   * @throws Error if the fetch fails or the response is invalid\n   */\n  static async fromUrl(url: string): Promise<NetworksRegistry> {\n    const response = await fetch(url);\n    if (!response.ok) {\n      throw new Error(`Failed to fetch registry: ${response.statusText}`);\n    }\n    const json = await response.text();\n    return NetworksRegistry.fromJson(json);\n  }\n\n  /**\n   * Creates a new registry instance from a JSON string.\n   *\n   * @param json - The JSON string containing registry data\n   * @returns A new NetworksRegistry instance\n   * @throws Error if the JSON is invalid\n   */\n  static fromJson(json: string): NetworksRegistry {\n    const parsedData = JSON.parse(json);\n    const networksRegistry = parsedData as NetworksRegistryInner;\n    return new NetworksRegistry(networksRegistry);\n  }\n\n  /**\n   * Loads the networks registry from a local JSON file.\n   *\n   * @param path - Path to the JSON file\n   * @returns A new NetworksRegistry instance\n   * @throws Error if the file cannot be read or contains invalid data\n   */\n  static fromFile(path: string): NetworksRegistry {\n    if (!readFileSync) {\n      throw new Error(\"File system operations are not supported in this environment\");\n    }\n    const contents = readFileSync(path, \"utf-8\");\n    return NetworksRegistry.fromJson(contents);\n  }\n\n  /**\n   * Gets the URL for the latest compatible version of the registry.\n   * Uses the major and minor version from package.json.\n   *\n   * @returns The URL string for the latest version\n   */\n  static getLatestVersionUrl(): string {\n    const [major, minor] = schemaVersion.split(\".\");\n    return `${REGISTRY_BASE_URL}/TheGraphNetworksRegistry_v${major}_${minor}_x.json`;\n  }\n\n  /**\n   * Gets the URL for the latest compatible version of the registry at GitHub.\n   * Uses the major and minor version from package.json.\n   *\n   * @returns The URL string for the latest version\n   */\n  static getLatestVersionFallbackUrl(): string {\n    const [major, minor] = schemaVersion.split(\".\");\n    return `${FALLBACK_BASE_URL}/TheGraphNetworksRegistry_v${major}_${minor}_x.json`;\n  }\n\n  /**\n   * Gets the URL for a specific version of the registry.\n   *\n   * @param version - The exact version (e.g. \"0.5.0\")\n   * @returns The URL string for the specified version\n   */\n  static getExactVersionUrl(version: string): string {\n    return `${REGISTRY_BASE_URL}/TheGraphNetworksRegistry_v${version.replace(/\\./g, \"_\")}.json`;\n  }\n\n  /**\n   * Gets the URL for a specific version of the registry at GitHub.\n   *\n   * @param version - The exact version (e.g. \"0.5.0\")\n   * @returns The URL string for the specified version\n   */\n  static getExactVersionFallbackUrl(version: string): string {\n    return `${FALLBACK_BASE_URL}/TheGraphNetworksRegistry_v${version.replace(/\\./g, \"_\")}.json`;\n  }\n\n  /**\n   * Finds a network by its unique identifier.\n   *\n   * @param id - The network ID (e.g. \"mainnet\", \"optimism\")\n   * @returns The network if found, undefined otherwise\n   * @deprecated Use getNetworkByGraphId instead\n   *\n   * @example\n   * ```typescript\n   * const mainnet = registry.getNetworkById(\"mainnet\");\n   * ```\n   */\n  getNetworkById(id: string): Network | undefined {\n    return this.registry.networks.find((network) => network.id === id);\n  }\n\n  /**\n   * Finds a network by its ID or one of its aliases.\n   *\n   * @param alias - The network ID or alias (e.g. \"eth\" for Ethereum mainnet)\n   * @returns The network if found, undefined otherwise\n   * @deprecated Use getNetworkByGraphId instead\n   *\n   * @example\n   * ```typescript\n   * const ethereum = registry.getNetworkByAlias(\"eth\");\n   * ```\n   */\n  getNetworkByAlias(alias: string): Network | undefined {\n    return this.registry.networks.find((network) => network.id === alias || network.aliases?.includes(alias));\n  }\n\n  /**\n   * Finds a network by its graph ID (either its ID field or one of its aliases).\n   *\n   * @param id - The graph ID, which could be either the network's ID or one of its aliases\n   * @returns The network if found, undefined otherwise\n   *\n   * @example\n   * ```typescript\n   * const mainnet = registry.getNetworkByGraphId(\"mainnet\");\n   * const ethereum = registry.getNetworkByGraphId(\"eth\");\n   * ```\n   */\n  getNetworkByGraphId(id: string): Network | undefined {\n    return this.registry.networks.find((network) => network.id === id || network.aliases?.includes(id));\n  }\n\n  /**\n   * Finds a network by its CAIP-2 chain ID.\n   *\n   * @param chainId - The CAIP-2 chain ID in the format \"[namespace]:[reference]\" (e.g., \"eip155:1\")\n   * @returns The network if found, undefined otherwise\n   *\n   * @example\n   * ```typescript\n   * const ethereum = registry.getNetworkByCaip2Id(\"eip155:1\");\n   * ```\n   */\n  getNetworkByCaip2Id(chainId: string): Network | undefined {\n    if (!chainId.includes(\":\")) {\n      console.warn(\"Warning: CAIP-2 Chain ID should be in the format '[namespace]:[reference]', e.g., 'eip155:1'\");\n      return undefined;\n    }\n\n    return this.registry.networks.find((network) => network.caip2Id === chainId);\n  }\n\n  /**\n   * Gets API URLs for a network, filtered by kind and with environment variables applied.\n   * Environment variable placeholders in the format {VARIABLE_NAME} will be replaced with\n   * actual environment variable values. URLs that reference non-existent environment\n   * variables will be omitted from the result.\n   *\n   * @param networkId - The network ID or alias\n   * @param kinds - Optional array of API URL kinds to filter by. If not provided or empty, returns all kinds\n   * @returns Array of API URLs with environment variables applied\n   *\n   * @example\n   * ```typescript\n   * // Get all Etherscan API URLs\n   * const etherscanUrls = registry.getApiUrls(\"mainnet\", [APIURLKind.Etherscan]);\n   *\n   * // Get all API URLs for the network\n   * const allUrls = registry.getApiUrls(\"mainnet\");\n   * ```\n   */\n  getApiUrls(networkId: string, kinds: APIURLKind[] = []): string[] {\n    const apis = this.getNetworkById(networkId)?.apiUrls ?? this.getNetworkByAlias(networkId)?.apiUrls ?? [];\n\n    return apis\n      .filter(({ kind }) => kinds.length === 0 || kinds.includes(kind))\n      .map(({ url }) => applyEnvVars(url))\n      .filter(Boolean);\n  }\n\n  /**\n   * Gets RPC URLs for a network with environment variables applied.\n   * Environment variable placeholders in the format {VARIABLE_NAME} will be replaced with\n   * actual environment variable values. URLs that reference non-existent environment\n   * variables will be omitted from the result.\n   *\n   * @param networkId - The network ID or alias\n   * @returns Array of RPC URLs with environment variables applied\n   *\n   * @example\n   * ```typescript\n   * // Get all RPC URLs for ethereum mainnet\n   * const rpcUrls = registry.getRpcUrls(\"mainnet\");\n   * ```\n   */\n  getRpcUrls(networkId: string): string[] {\n    const urls = this.getNetworkById(networkId)?.rpcUrls ?? this.getNetworkByAlias(networkId)?.rpcUrls ?? [];\n\n    return urls.map((url) => applyEnvVars(url)).filter(Boolean);\n  }\n}\n"],"mappings":"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","names":["APIURLKind","BytesEncoding","Protocol","NetworkType","RelationKind","Feature","a","typ","val","l","key"]}